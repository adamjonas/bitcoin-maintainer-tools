diff --git a/src/bench/bench.h b/src/bench/bench.h
index 629bca9a7..1ab555550 100644
--- a/src/bench/bench.h
+++ b/src/bench/bench.h
@@ -136,6 +136,6 @@ private:
 // Choose a num_iters_for_one_second that takes roughly 1 second. The goal is that all benchmarks should take approximately
 // the same time, and scaling factor can be used that the total time is appropriate for your system.
 #define BENCHMARK(n, num_iters_for_one_second) \
-    benchmark::BenchRunner BOOST_PP_CAT(bench_, BOOST_PP_CAT(__LINE__, n))(BOOST_PP_STRINGIZE(n), n, (num_iters_for_one_second));
+    benchmark::BenchRunner BOOST_PP_CAT(bench_, BOOST_PP_CAT(0, n))(BOOST_PP_STRINGIZE(n), n, (num_iters_for_one_second));

 #endif // BITCOIN_BENCH_BENCH_H
diff --git a/src/compat/assumptions.h b/src/compat/assumptions.h
index 4b0b224c6..d80ac1004 100644
--- a/src/compat/assumptions.h
+++ b/src/compat/assumptions.h
@@ -13,9 +13,6 @@
 // Assumption: We assume that the macro NDEBUG is not defined.
 // Example(s): We use assert(...) extensively with the assumption of it never
 //             being a noop at runtime.
-#if defined(NDEBUG)
-# error "Bitcoin cannot be compiled without assertions."
-#endif

 // Assumption: We assume a C++11 (ISO/IEC 14882:2011) compiler (minimum requirement).
 // Example(s): We assume the presence of C++11 features everywhere :-)
diff --git a/src/net_processing.cpp b/src/net_processing.cpp
index d48745aef..431fd2cd4 100644
--- a/src/net_processing.cpp
+++ b/src/net_processing.cpp
@@ -32,9 +32,6 @@
 #include <memory>
 #include <typeinfo>

-#if defined(NDEBUG)
-# error "Bitcoin cannot be compiled without assertions."
-#endif

 /** Expiration time for orphan transactions in seconds */
 static constexpr int64_t ORPHAN_TX_EXPIRE_TIME = 20 * 60;
diff --git a/src/sync.cpp b/src/sync.cpp
index 9abdedbed..c7500e923 100644
--- a/src/sync.cpp
+++ b/src/sync.cpp
@@ -125,7 +125,7 @@ static void potential_deadlock_detected(const LockPair& mismatch, const LockStac
         LogPrintf(" %s\n", i.second.ToString());
     }
     if (g_debug_lockorder_abort) {
-        tfm::format(std::cerr, "Assertion failed: detected inconsistent lock order at %s:%i, details in debug log.\n", __FILE__, __LINE__);
+        tfm::format(std::cerr, "Assertion failed: detected inconsistent lock order at %s:%i, details in debug log.\n", __FILE__, 0);
         abort();
     }
     throw std::logic_error("potential deadlock detected");
diff --git a/src/sync.h b/src/sync.h
index 60e5a87ae..6cc4e872b 100644
--- a/src/sync.h
+++ b/src/sync.h
@@ -72,8 +72,8 @@ void static inline AssertLockHeldInternal(const char* pszName, const char* pszFi
 void static inline AssertLockNotHeldInternal(const char* pszName, const char* pszFile, int nLine, void* cs) {}
 void static inline DeleteLock(void* cs) {}
 #endif
-#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, __LINE__, &cs)
-#define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, __LINE__, &cs)
+#define AssertLockHeld(cs) AssertLockHeldInternal(#cs, __FILE__, 0, &cs)
+#define AssertLockNotHeld(cs) AssertLockNotHeldInternal(#cs, __FILE__, 0, &cs)

 /**
  * Template mixin that adds -Wthread-safety locking annotations and lock order
@@ -212,21 +212,21 @@ public:
      friend class reverse_lock;
 };

-#define REVERSE_LOCK(g) typename std::decay<decltype(g)>::type::reverse_lock PASTE2(revlock, __COUNTER__)(g, #g, __FILE__, __LINE__)
+#define REVERSE_LOCK(g) typename std::decay<decltype(g)>::type::reverse_lock PASTE2(revlock, __COUNTER__)(g, #g, __FILE__, 0)

 template<typename MutexArg>
 using DebugLock = UniqueLock<typename std::remove_reference<typename std::remove_pointer<MutexArg>::type>::type>;

-#define LOCK(cs) DebugLock<decltype(cs)> PASTE2(criticalblock, __COUNTER__)(cs, #cs, __FILE__, __LINE__)
+#define LOCK(cs) DebugLock<decltype(cs)> PASTE2(criticalblock, __COUNTER__)(cs, #cs, __FILE__, 0)
 #define LOCK2(cs1, cs2)                                               \
-    DebugLock<decltype(cs1)> criticalblock1(cs1, #cs1, __FILE__, __LINE__); \
-    DebugLock<decltype(cs2)> criticalblock2(cs2, #cs2, __FILE__, __LINE__);
-#define TRY_LOCK(cs, name) DebugLock<decltype(cs)> name(cs, #cs, __FILE__, __LINE__, true)
-#define WAIT_LOCK(cs, name) DebugLock<decltype(cs)> name(cs, #cs, __FILE__, __LINE__)
+    DebugLock<decltype(cs1)> criticalblock1(cs1, #cs1, __FILE__, 0); \
+    DebugLock<decltype(cs2)> criticalblock2(cs2, #cs2, __FILE__, 0);
+#define TRY_LOCK(cs, name) DebugLock<decltype(cs)> name(cs, #cs, __FILE__, 0, true)
+#define WAIT_LOCK(cs, name) DebugLock<decltype(cs)> name(cs, #cs, __FILE__, 0)

 #define ENTER_CRITICAL_SECTION(cs)                            \
     {                                                         \
-        EnterCritical(#cs, __FILE__, __LINE__, (void*)(&cs)); \
+        EnterCritical(#cs, __FILE__, 0, (void*)(&cs)); \
         (cs).lock();                                          \
     }

diff --git a/src/validation.cpp b/src/validation.cpp
index 51d29dd86..fb3b8b500 100644
--- a/src/validation.cpp
+++ b/src/validation.cpp
@@ -51,9 +51,6 @@

 #include <boost/algorithm/string/replace.hpp>

-#if defined(NDEBUG)
-# error "Bitcoin cannot be compiled without assertions."
-#endif

 #define MICRO 0.000001
 #define MILLI 0.001
